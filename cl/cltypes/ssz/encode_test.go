package ssz_test

import (
	"encoding/hex"
	"testing"

	libcommon "github.com/ledgerwatch/erigon-lib/common"
	"github.com/ledgerwatch/erigon/cl/cltypes/ssz"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

type testType1 struct {
	A [32]byte       `ssz:"true"`
	Y libcommon.Hash `ssz:"true"`
	X uint64         `ssz:"true"`
	Z [48]byte       `ssz:"true"`
	P [96]byte       `ssz:"true"`
}

var t1 = testType1{
	A: [32]byte{1},
	Y: [32]byte{2},
	X: 758493,
	Z: [48]byte{3},
	P: [96]byte{4},
}

type testType2 struct {
	M1 testType1 `ssz:"true"`
	M2 testType1 `ssz:"true"`
}

func TestEncodeSimple(t *testing.T) {
	a, err := ssz.Encode(t1, nil)
	require.NoError(t, err)
	assert.Equal(t, hex.EncodeToString(a), "01000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000dd920b0000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
}

func TestEncodeNested(t *testing.T) {
	l := testType2{
		M1: t1,
		M2: t1,
	}
	a, err := ssz.Encode(l, nil)
	require.NoError(t, err)
	require.Equal(t, hex.EncodeToString(a), "01000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000dd920b000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000dd920b0000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
}
